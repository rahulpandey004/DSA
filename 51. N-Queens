class Solution:
    def addS(self,board,ans,n):
        res=[]
        # print(board)
        for i in board:
            temp=""
            for j in i:
                if j==1:    
                    temp+="Q"
                if j==0:
                    temp+="."
            res.append(temp)
            # for j in i:
                # temp.append(j)
        # print(temp)
        ans.append(res)
    def isSafe(self,row,col,board,n):
        x=row
        y=col
        #check for same row:
        while y>=0:
            if board[x][y]==1:
                return False
            y-=1
        # check for diagonal
        x=row
        y=col
        while x>=0 and y>=0:
            if board[x][y]==1:
                return False
            y-=1
            x-=1
        x=row
        y=col
        while x<n and y>=0:
            if board[x][y]==1:
                return False
            y-=1
            x+=1
        return True

    def solve(self,col,n,board,ans):
        if col==n:
            self.addS(board,ans,n)
            return 
        for row in range(n):
            if self.isSafe(row,col,board,n):
                board[row][col]=1
                self.solve(col+1,n,board,ans)
                board[row][col]=0

        
    def solveNQueens(self, n: int) -> List[List[str]]:
        ans=[]
        board=[[0]*n for i in range(n)]
        # print(board)
        self.solve(0,n,board,ans)
        return ans
        # res=[]
        # for i in ans:
